{{define "test_helpers"}}
// Вспомогательные функции для тестов
func getValidValue(fieldType string) interface{} {
    switch fieldType {
    case "string":
        return "test_value"
    case "int64", "int32":
        return int64(1)
    case "float64", "float32":
        return float64(1.0)
    case "bool":
        return true
    default:
        return nil
    }
}

func (s *IntegrationTestSuite) generateTestData(fieldType string) interface{} {
    switch fieldType {
    case "string":
        return s.generateString(10)
    case "email":
        return fmt.Sprintf("%s@example.com", s.generateString(8))
    case "phone":
        return fmt.Sprintf("+%d", 1000000000+s.r.Int63n(8999999999))
    case "status":
        statuses := []string{"active", "inactive", "pending"}
        return statuses[s.r.Intn(len(statuses))]
    default:
        return getValidValue(fieldType)
    }
}

func (s *IntegrationTestSuite) generateInvalidData(fieldType string) interface{} {
    switch fieldType {
    case "email":
        return "not_an_email"
    case "phone":
        return "123" // слишком короткий
    case "status":
        return "invalid_status"
    default:
        return nil
    }
}

// Очистка БД перед каждым тестом
func (s *IntegrationTestSuite) cleanupDB() {
    _, err := s.db.Exec("TRUNCATE {{toLower .Name}}s CASCADE")
    s.Require().NoError(err)
}

// Генерация случайной строки
func (s *IntegrationTestSuite) generateString(length int) string {
    const letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    b := make([]byte, length)
    for i := range b {
        b[i] = letters[s.r.Intn(len(letters))]
    }
    return string(b)
}

// Проверка ошибок HTTP
func (s *IntegrationTestSuite) checkHTTPError(resp *http.Response, expectedStatus int, expectedError string) {
    s.Require().Equal(expectedStatus, resp.StatusCode)
    var errResp map[string]string
    s.Require().NoError(json.NewDecoder(resp.Body).Decode(&errResp))
    s.Require().Contains(errResp["error"], expectedError)
}

// Проверка ошибок gRPC
func (s *IntegrationTestSuite) checkGRPCError(err error, expectedCode codes.Code, expectedMsg string) {
    s.Require().Error(err)
    st, ok := status.FromError(err)
    s.Require().True(ok)
    s.Require().Equal(expectedCode, st.Code())
    s.Require().Contains(st.Message(), expectedMsg)
}
{{end}} 