package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"net/http"
	"os"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/jmoiron/sqlx"
	"github.com/joho/godotenv"
	_ "github.com/lib/pq"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"

	"app/internal/proto"
	"app/internal/repository"
	{{- range .}}
	"app/internal/service/{{toLower .Name}}"
	{{toLower .Name}}Grpc "app/internal/grpc/{{toLower .Name}}"
	{{- end}}
)

func main() {
	// Load .env file
	if err := godotenv.Load(); err != nil {
		log.Printf("Warning: .env file not found or error loading it: %v", err)
	}

	// Get database host, port, user, password, and name from environment
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbUser := os.Getenv("DB_USER")
	dbPass := os.Getenv("DB_PASSWORD")
	dbName := os.Getenv("DB_NAME")

	if dbHost == "" || dbPort == "" || dbUser == "" || dbPass == "" || dbName == "" {
		log.Fatal("Database environment variables are not set")
	}

	// Get port from environment or use default
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	// Get gRPC port from environment or use default
	grpcPort := os.Getenv("GRPC_PORT")
	if grpcPort == "" {
		grpcPort = "50051"
	}

	// Connect to database
	dbURL := fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable",
		dbUser, dbPass, dbHost, dbPort, dbName)
	db, err := sqlx.Connect("postgres", dbURL)
	if err != nil {
		log.Fatalf("failed to connect to database: %v", err)
	}
	defer db.Close()

	// Create repository
	repo := repository.NewRepository(db)

	// Create services
	{{- range .}}
	{{toLower .Name}}Service := {{toLower .Name}}.NewService(repo)
	{{- end}}

	// Create context with cancellation
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// Start gRPC server
	lis, err := net.Listen("tcp", ":"+grpcPort)
	if err != nil {
		log.Fatalf("Failed to listen: %v", err)
	}
	s := grpc.NewServer()

	{{- range .}}
	proto.Register{{.Name}}ServiceServer(s, {{toLower .Name}}Grpc.NewServer({{toLower .Name}}Service))
	{{- end}}

	// Register reflection service on gRPC server
	reflection.Register(s)

	go func() {
		log.Printf("gRPC server listening at %v", lis.Addr())
		if err := s.Serve(lis); err != nil {
			log.Fatalf("Failed to serve: %v", err)
		}
	}()

	// Create gRPC-Gateway mux
	gwmux := runtime.NewServeMux()
	opts := []grpc.DialOption{grpc.WithInsecure()}

	{{- range .}}
	// Register gRPC-Gateway handlers
	if err := proto.Register{{.Name}}ServiceHandlerFromEndpoint(ctx, gwmux, "localhost:"+grpcPort, opts); err != nil {
		log.Fatalf("Failed to register gateway: %v", err)
	}
	{{- end}}

	// Start HTTP server
	log.Printf("Server starting on :%s", port)
	if err := http.ListenAndServe(":"+port, gwmux); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}