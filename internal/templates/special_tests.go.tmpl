{{define "special_tests"}}
// Тесты на таймауты
func (s *IntegrationTestSuite) Test{{.Name}}Timeouts() {
    tests := []struct {
        name        string
        timeout     time.Duration
        setupFn     func()
        wantErrCode codes.Code
    }{
        {
            name:    "Error/CreateTimeout",
            timeout: 1 * time.Second,
            setupFn: func() {
                // Имитируем медленную БД
                time.Sleep(2 * time.Second)
            },
            wantErrCode: codes.DeadlineExceeded,
        },
        {
            name:    "Success/WithinTimeout",
            timeout: 3 * time.Second,
            wantErrCode: codes.OK,
        },
    }

    for _, tt := range tests {
        s.Run(tt.name, func() {
            s.cleanupDB()
            if tt.setupFn != nil {
                tt.setupFn()
            }

            ctx, cancel := context.WithTimeout(context.Background(), tt.timeout)
            defer cancel()

            _, err := s.{{toLower .Name}}.Create(ctx, &proto.Create{{.Name}}Request{
                {{range .Fields}}
                {{if ne .Name "Id"}}
                {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
                {{end}}
                {{end}}
            })

            if tt.wantErrCode != codes.OK {
                s.Require().Error(err)
                st, ok := status.FromError(err)
                s.Require().True(ok)
                s.Require().Equal(tt.wantErrCode, st.Code())
            } else {
                s.Require().NoError(err)
            }
        })
    }
}

// Тесты на конкурентность
func (s *IntegrationTestSuite) Test{{.Name}}Concurrent() {
    const numGoroutines = 10
    var wg sync.WaitGroup
    wg.Add(numGoroutines)
    errors := make(chan error, numGoroutines)

    for i := 0; i < numGoroutines; i++ {
        go func() {
            defer wg.Done()
            
            // Создаем запись
            resp, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
                {{range .Fields}}
                {{if ne .Name "Id"}}
                {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
                {{end}}
                {{end}}
            })
            if err != nil {
                errors <- fmt.Errorf("create error: %v", err)
                return
            }

            // Сразу же пытаемся её обновить
            _, err = s.{{toLower .Name}}.Update(context.Background(), &proto.Update{{.Name}}Request{
                Id: resp.Id,
                {{range .Fields}}
                {{if ne .Name "Id"}}
                {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
                {{end}}
                {{end}}
            })
            if err != nil {
                errors <- fmt.Errorf("update error: %v", err)
                return
            }
        }()
    }

    wg.Wait()
    close(errors)

    for err := range errors {
        s.Require().NoError(err)
    }
}

// Тесты на транзакционность
func (s *IntegrationTestSuite) Test{{.Name}}Transaction() {
    // Создаем начальную запись
    resp, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
        {{range .Fields}}
        {{if ne .Name "Id"}}
        {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
        {{end}}
        {{end}}
    })
    s.Require().NoError(err)
    initialData := resp

    // Пытаемся обновить с невалидными данными
    _, err = s.{{toLower .Name}}.Update(context.Background(), &proto.Update{{.Name}}Request{
        Id: resp.Id,
        {{range .Fields}}
        {{if ne .Name "Id"}}
        {{.Name}}: s.generateInvalidData("{{.Type}}").({{.Type}}),
        {{end}}
        {{end}}
    })
    s.Require().Error(err)

    // Проверяем что данные остались неизменными
    checkResp, err := s.{{toLower .Name}}.Get(context.Background(), &proto.Get{{.Name}}Request{Id: resp.Id})
    s.Require().NoError(err)
    {{range .Fields}}
    {{if ne .Name "Id"}}
    s.Require().Equal(initialData.{{.Name}}, checkResp.{{.Name}})
    {{end}}
    {{end}}
}

// Тесты на фильтрацию
func (s *IntegrationTestSuite) Test{{.Name}}Filtering() {
    // Создаем тестовые данные с разными статусами
    statuses := []string{"active", "inactive", "pending"}
    for _, status := range statuses {
        _, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
            {{range .Fields}}
            {{if eq .Name "Status"}}
            Status: status,
            {{else if ne .Name "Id"}}
            {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
            {{end}}
            {{end}}
        })
        s.Require().NoError(err)
    }

    // Проверяем фильтрацию по статусу
    for _, status := range statuses {
        resp, err := s.{{toLower .Name}}.List(context.Background(), &proto.List{{.Name}}Request{
            Filter: &proto.ListFilter{
                Status: status,
            },
        })
        s.Require().NoError(err)
        s.Require().NotEmpty(resp.Items)
        for _, item := range resp.Items {
            s.Require().Equal(status, item.Status)
        }
    }
}

// Тест на восстановление после сбоев
func (s *IntegrationTestSuite) Test{{.Name}}Recovery() {
    // Создаем тестовые данные
    resp, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
        {{range .Fields}}
        {{if ne .Name "Id"}}
        {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
        {{end}}
        {{end}}
    })
    s.Require().NoError(err)

    // Имитируем сбой БД, перезапуская контейнер
    err = s.pool.Retry(func() error {
        return s.pool.Client.RestartContainer(s.resource.Container.ID, 10*time.Second)
    })
    s.Require().NoError(err)

    // Проверяем что данные сохранились после перезапуска
    checkResp, err := s.{{toLower .Name}}.Get(context.Background(), &proto.Get{{.Name}}Request{Id: resp.Id})
    s.Require().NoError(err)
    s.Require().Equal(resp, checkResp)
}

// Тест на производительность
func (s *IntegrationTestSuite) Test{{.Name}}Performance() {
    tests := []struct {
        name     string
        numReqs  int
        parallel bool
        timeout  time.Duration
    }{
        {
            name:     "Sequential/100Requests",
            numReqs:  100,
            parallel: false,
            timeout:  10 * time.Second,
        },
        {
            name:     "Parallel/100Requests",
            numReqs:  100,
            parallel: true,
            timeout:  5 * time.Second,
        },
    }

    for _, tt := range tests {
        s.Run(tt.name, func() {
            s.cleanupDB()
            start := time.Now()

            if tt.parallel {
                var wg sync.WaitGroup
                wg.Add(tt.numReqs)
                for i := 0; i < tt.numReqs; i++ {
                    go func() {
                        defer wg.Done()
                        _, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
                            {{range .Fields}}
                            {{if ne .Name "Id"}}
                            {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
                            {{end}}
                            {{end}}
                        })
                        s.Require().NoError(err)
                    }()
                }
                wg.Wait()
            } else {
                for i := 0; i < tt.numReqs; i++ {
                    _, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
                        {{range .Fields}}
                        {{if ne .Name "Id"}}
                        {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
                        {{end}}
                        {{end}}
                    })
                    s.Require().NoError(err)
                }
            }

            elapsed := time.Since(start)
            s.Require().Less(elapsed, tt.timeout)
            s.T().Logf("Performance test completed in %v", elapsed)
        })
    }
}

// Тест на консистентность данных между HTTP и gRPC
func (s *IntegrationTestSuite) Test{{.Name}}Consistency() {
    // Создаем через gRPC
    grpcResp, err := s.{{toLower .Name}}.Create(context.Background(), &proto.Create{{.Name}}Request{
        {{range .Fields}}
        {{if ne .Name "Id"}}
        {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
        {{end}}
        {{end}}
    })
    s.Require().NoError(err)

    // Читаем через HTTP
    resp, err := http.Get(fmt.Sprintf("http://localhost:%s/api/v1/{{toLower .Name}}s/%d", s.httpPort, grpcResp.Id))
    s.Require().NoError(err)
    defer resp.Body.Close()

    s.Require().Equal(http.StatusOK, resp.StatusCode)
    var httpResp map[string]interface{}
    err = json.NewDecoder(resp.Body).Decode(&httpResp)
    s.Require().NoError(err)

    // Проверяем соответствие данных
    s.Require().Equal(float64(grpcResp.Id), httpResp["id"])
    {{range .Fields}}
    {{if ne .Name "Id"}}
    s.Require().Equal(grpcResp.{{.Name}}, httpResp["{{toLower .Name}}"])
    {{end}}
    {{end}}
}

// Тест на обработку метаданных gRPC
func (s *IntegrationTestSuite) Test{{.Name}}Metadata() {
    // Создаем контекст с метаданными
    md := metadata.New(map[string]string{
        "x-request-id": "test-request-id",
        "user-agent":   "test-client",
    })
    ctx := metadata.NewOutgoingContext(context.Background(), md)

    // Выполняем запрос с метаданными
    resp, err := s.{{toLower .Name}}.Create(ctx, &proto.Create{{.Name}}Request{
        {{range .Fields}}
        {{if ne .Name "Id"}}
        {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
        {{end}}
        {{end}}
    })
    s.Require().NoError(err)
    s.Require().NotNil(resp)
}

// Тест на отмену контекста
func (s *IntegrationTestSuite) Test{{.Name}}ContextCancellation() {
    ctx, cancel := context.WithCancel(context.Background())
    
    // Отменяем контекст до выполнения запроса
    cancel()

    _, err := s.{{toLower .Name}}.Create(ctx, &proto.Create{{.Name}}Request{
        {{range .Fields}}
        {{if ne .Name "Id"}}
        {{.Name}}: s.generateTestData("{{.Type}}").({{.Type}}),
        {{end}}
        {{end}}
    })
    s.Require().Error(err)
    s.Require().Equal(codes.Canceled, status.Code(err))
}
{{end}} 