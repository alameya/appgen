package integration

import (
    "context"
    "testing"
    "time"

    "github.com/stretchr/testify/suite"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
    "github.com/stretchr/testify/require"

    "app/internal/proto"
)

type GRPCTestSuite struct {
    suite.Suite
    ctx        context.Context
    cancel     context.CancelFunc
    conn       *grpc.ClientConn
    {{ range . }}
    {{ toLower(.Name) }} proto.{{ .Name }}ServiceClient
    {{ end }}
}

func (s *GRPCTestSuite) SetupSuite() {
    var err error
    s.ctx, s.cancel = context.WithTimeout(context.Background(), 30*time.Second)
    
    s.conn, err = grpc.Dial("localhost:50051", grpc.WithInsecure())
    s.Require().NoError(err)

    {{ range . }}
    s.{{ toLower(.Name) }} = proto.New{{ .Name }}ServiceClient(s.conn)
    {{ end }}
}

func (s *GRPCTestSuite) TearDownSuite() {
    s.cancel()
    if s.conn != nil {
        s.conn.Close()
    }
}

{{ range . }}
func (s *GRPCTestSuite) Test{{ .Name }}CRUD() {
    tests := []struct {
        name        string
        setup       func() (*proto.{{ .Name }}, error)
        run         func(*proto.{{ .Name }}) error
        validate    func(*proto.{{ .Name }}, error)
        wantErr     bool
        wantErrCode codes.Code
    }{
        {
            name: "Create_Success",
            run: func(_ *proto.{{ .Name }}) error {
                _, err := s.{{ toLower(.Name) }}.Create(s.ctx, &proto.Create{{ .Name }}Request{
                    {{ range .Fields }}
                    {{ if .Name != "Id" }}
                    {{ .Name }}: {{ if .Type == "string" }}"test{{ .Name }}"
                    {{ else if .Type == "int64" }}1
                    {{ else if .Type == "float64" }}1.0
                    {{ else if .Type == "bool" }}true
                    {{ else }}""{{ end }},
                    {{ end }}
                    {{ end }}
                })
                return err
            },
            validate: func(got *proto.{{ .Name }}, err error) {
                s.Require().NoError(err)
                s.Require().NotNil(got)
                s.Require().NotZero(got.Id)
            },
        },
        {
            name: "Get_Success",
            setup: func() (*proto.{{ .Name }}, error) {
                return s.{{ toLower(.Name) }}.Create(s.ctx, &proto.Create{{ .Name }}Request{
                    {{ range .Fields }}
                    {{ if .Name != "Id" }}
                    {{ .Name }}: {{ if .Type == "string" }}"test{{ .Name }}"
                    {{ else if .Type == "int64" }}1
                    {{ else if .Type == "float64" }}1.0
                    {{ else if .Type == "bool" }}true
                    {{ else }}""{{ end }},
                    {{ end }}
                    {{ end }}
                })
            },
            run: func(created *proto.{{ .Name }}) error {
                _, err := s.{{ toLower(.Name) }}.Get(s.ctx, &proto.Get{{ .Name }}Request{
                    Id: created.Id,
                })
                return err
            },
            validate: func(got *proto.{{ .Name }}, err error) {
                s.Require().NoError(err)
                s.Require().NotNil(got)
            },
        },
        {
            name: "Get_NotFound",
            run: func(_ *proto.{{ .Name }}) error {
                _, err := s.{{ toLower(.Name) }}.Get(s.ctx, &proto.Get{{ .Name }}Request{
                    Id: 999999,
                })
                return err
            },
            wantErr: true,
            wantErrCode: codes.NotFound,
        },
        {
            name: "Update_Success",
            setup: func() (*proto.{{ .Name }}, error) {
                return s.{{ toLower(.Name) }}.Create(s.ctx, &proto.Create{{ .Name }}Request{
                    {{ range .Fields }}
                    {{ if .Name != "Id" }}
                    {{ .Name }}: {{ if .Type == "string" }}"test{{ .Name }}"
                    {{ else if .Type == "int64" }}1
                    {{ else if .Type == "float64" }}1.0
                    {{ else if .Type == "bool" }}true
                    {{ else }}""{{ end }},
                    {{ end }}
                    {{ end }}
                })
            },
            run: func(created *proto.{{ .Name }}) error {
                _, err := s.{{ toLower(.Name) }}.Update(s.ctx, &proto.Update{{ .Name }}Request{
                    Id: created.Id,
                    {{ range .Fields }}
                    {{ if .Name != "Id" }}
                    {{ .Name }}: {{ if .Type == "string" }}"updated{{ .Name }}"
                    {{ else if .Type == "int64" }}2
                    {{ else if .Type == "float64" }}2.0
                    {{ else if .Type == "bool" }}false
                    {{ else }}""{{ end }},
                    {{ end }}
                    {{ end }}
                })
                return err
            },
            validate: func(got *proto.{{ .Name }}, err error) {
                s.Require().NoError(err)
                s.Require().NotNil(got)
                {{ range .Fields }}
                {{ if .Name != "Id" }}
                s.Require().Equal({{ if .Type == "string" }}"updated{{ .Name }}"
                {{ else if .Type == "int64" }}int64(2)
                {{ else if .Type == "float64" }}2.0
                {{ else if .Type == "bool" }}false
                {{ else }}""{{ end }}, got.{{ .Name }})
                {{ end }}
                {{ end }}
            },
        },
        {
            name: "Delete_Success",
            setup: func() (*proto.{{ .Name }}, error) {
                return s.{{ toLower(.Name) }}.Create(s.ctx, &proto.Create{{ .Name }}Request{
                    {{ range .Fields }}
                    {{ if .Name != "Id" }}
                    {{ .Name }}: {{ if .Type == "string" }}"test{{ .Name }}"
                    {{ else if .Type == "int64" }}1
                    {{ else if .Type == "float64" }}1.0
                    {{ else if .Type == "bool" }}true
                    {{ else }}""{{ end }},
                    {{ end }}
                    {{ end }}
                })
            },
            run: func(created *proto.{{ .Name }}) error {
                _, err := s.{{ toLower(.Name) }}.Delete(s.ctx, &proto.Delete{{ .Name }}Request{
                    Id: created.Id,
                })
                return err
            },
            validate: func(_ *proto.{{ .Name }}, err error) {
                s.Require().NoError(err)
                // Verify deletion
                _, err = s.{{ toLower(.Name) }}.Get(s.ctx, &proto.Get{{ .Name }}Request{Id: 1})
                s.Require().Error(err)
                st, ok := status.FromError(err)
                s.Require().True(ok)
                s.Require().Equal(codes.NotFound, st.Code())
            },
        },
    }

    for _, tt := range tests {
        s.Run(tt.name, func() {
            var setupData *proto.{{ .Name }}
            var err error
            
            if tt.setup != nil {
                setupData, err = tt.setup()
                s.Require().NoError(err)
            }

            err = tt.run(setupData)

            if tt.wantErr {
                s.Require().Error(err)
                st, ok := status.FromError(err)
                s.Require().True(ok)
                s.Require().Equal(tt.wantErrCode, st.Code())
                return
            }

            if tt.validate != nil {
                tt.validate(setupData, err)
            }
        })
    }
}
{{ end }}

func TestGRPCSuite(t *testing.T) {
    suite.Run(t, new(GRPCTestSuite))
} 