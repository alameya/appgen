package tests

import (
    "context"
    "database/sql"
    "fmt"
    "log"
    "os"
    "testing"
    "time"

    "github.com/ory/dockertest/v3"
    "github.com/stretchr/testify/suite"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"

    "app/internal/proto"
    "app/internal/repository"
)

type IntegrationTestSuite struct {
    suite.Suite
    db       *sql.DB
    pool     *dockertest.Pool
    resource *dockertest.Resource
    {{- range . }}
    {{toLower .Name}} proto.{{.Name}}ServiceClient
    {{- end }}
}

func TestIntegrationSuite(t *testing.T) {
    if testing.Short() {
        t.Skip("Skipping integration test")
    }
    suite.Run(t, new(IntegrationTestSuite))
}

func (s *IntegrationTestSuite) SetupSuite() {
    var err error

    // Create a new pool
    s.pool, err = dockertest.NewPool("")
    if err != nil {
        log.Fatalf("Could not connect to docker: %s", err)
    }

    // Start a new PostgreSQL container
    s.resource, err = s.pool.Run("postgres", "15", []string{
        "POSTGRES_USER=postgres",
        "POSTGRES_PASSWORD=postgres",
        "POSTGRES_DB=testdb",
    })
    if err != nil {
        log.Fatalf("Could not start resource: %s", err)
    }

    // Set database URL
    dbURL := fmt.Sprintf("postgres://postgres:postgres@localhost:%s/testdb?sslmode=disable",
        s.resource.GetPort("5432/tcp"))

    // Wait for container to start and connect to it
    if err = s.pool.Retry(func() error {
        s.db, err = sql.Open("postgres", dbURL)
        if err != nil {
            return err
        }
        return s.db.Ping()
    }); err != nil {
        log.Fatalf("Could not connect to docker: %s", err)
    }

    // Apply migrations
    if err := s.applyMigrations(); err != nil {
        log.Fatalf("Could not apply migrations: %s", err)
    }

    // Create gRPC connection
    conn, err := grpc.Dial("localhost:50051", grpc.WithInsecure())
    if err != nil {
        log.Fatalf("Failed to connect: %v", err)
    }

    // Initialize service clients
    {{- range . }}
    s.{{toLower .Name}} = proto.New{{.Name}}ServiceClient(conn)
    {{- end }}
}

func (s *IntegrationTestSuite) TearDownSuite() {
    // Kill and remove the container
    if err := s.pool.Purge(s.resource); err != nil {
        log.Fatalf("Could not purge resource: %s", err)
    }
}

func (s *IntegrationTestSuite) applyMigrations() error {
    // Apply schema using Atlas
    cmd := exec.Command("atlas", "schema", "apply",
        "--url", fmt.Sprintf("postgres://postgres:postgres@localhost:%s/testdb?sslmode=disable",
            s.resource.GetPort("5432/tcp")),
        "--to", "file://atlas.hcl",
        "--dev-url", "docker://postgres/15")
    
    output, err := cmd.CombinedOutput()
    if err != nil {
        return fmt.Errorf("failed to apply migrations: %s, output: %s", err, output)
    }
    
    return nil
}

func (s *IntegrationTestSuite) cleanupDB() {
    {{- range . }}
    _, err := s.db.Exec("TRUNCATE TABLE {{toLower .Name}}s CASCADE")
    s.Require().NoError(err)
    {{- end }}
} 