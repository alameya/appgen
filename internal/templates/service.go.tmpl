package service

import (
	"context"

	"app/internal/models"
	"app/internal/interfaces"
)

type {{toLower .Name}}Service struct {
	repo interfaces.{{.Name}}Repository
}

func New{{.Name}}Service(repo interfaces.{{.Name}}Repository) interfaces.{{.Name}}Service {
	return &{{toLower .Name}}Service{repo: repo}
}

func (s *{{toLower .Name}}Service) Create(ctx context.Context, item *models.{{.Name}}) (*models.{{.Name}}, error) {
	result, err := s.repo.Create(ctx, item)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{toLower .Name}}Service) Get(ctx context.Context, id int64) (*models.{{.Name}}, error) {
	result, err := s.repo.Get(ctx, id)
	if err != nil {
		return nil, err
	}
	return result, nil
}

func (s *{{toLower .Name}}Service) List(ctx context.Context) ([]*models.{{.Name}}, error) {
	results, err := s.repo.List(ctx)
	if err != nil {
		return nil, err
	}
	return results, nil
}

func (s *{{toLower .Name}}Service) Update(ctx context.Context, item *models.{{.Name}}) error {
	if err := s.repo.Update(ctx, item); err != nil {
		return err
	}
	return nil
}

func (s *{{toLower .Name}}Service) Delete(ctx context.Context, id int64) error {
	if err := s.repo.Delete(ctx, id); err != nil {
		return err
	}
	return nil
} 